// service/apiAdmin/apiStation/API.tsx
import { AxiosError } from "axios";
import api from "../../Utils";

// ============================================
// ‚úÖ TYPE DEFINITIONS
// ============================================

/**
 * Station Interface - Backend Response Structure
 */
export interface Station {
  _id: string;
  name: string;
  code?: string;
  location: {
    address: string;
    lat: number;
    lng: number;
  };
  imgStation?: {
    _id: string;
    url: string;
    publicId: string;
    type: string;
    provider: string;
    tags: string[];
    uploadedBy: string;
    createdAt: string;
    updatedAt: string;
  };
  note?: string;
  isActive: boolean;
  createdAt?: string;
  updatedAt?: string;
  __v?: number;
}

/**
 * Delete Station Response
 */
export interface DeleteStationResponse {
  success?: boolean;
  deletedStationId?: string;
  movedVehiclesCount?: number;
  message?: string;
}

// ============================================
// ‚úÖ ERROR HANDLER
// ============================================

const handleError = (error: unknown) => {
  const err = error as AxiosError;
  console.error("Station API Error:", {
    status: err?.response?.status,
    data: err?.response?.data,
    message: err?.message,
  });

  let errorMessage = err?.message || "Unknown error";
  if (err?.response?.data) {
    const responseData: any = err.response.data;
    if (responseData.error) {
      errorMessage = responseData.error;
    } else if (responseData.message) {
      errorMessage = responseData.message;
    }
  }

  throw new Error(errorMessage);
};

// ============================================
// ‚úÖ API FUNCTIONS
// ============================================

/**
 * GET /api/stations
 * Fetch all stations with optional pagination
 */
export const getAllStations = async (
  page: number = 1,
  limit: number = 20
): Promise<Station[]> => {
  try {
    const response = await api.get<Station[]>("/stations", {
      params: { page, limit },
    });

    console.log("Get all stations response:", response.data);

    if (Array.isArray(response.data)) {
      return response.data;
    }

    if (
      (response.data as any).success &&
      Array.isArray((response.data as any).data)
    ) {
      return (response.data as any).data;
    }

    throw new Error("Invalid API response format");
  } catch (error) {
    handleError(error);
    throw error;
  }
};

/**
 * GET /api/stations/:id
 * Fetch a single station by ID
 */
export const getStationById = async (id: string): Promise<Station> => {
  try {
    const response = await api.get<Station>(`/stations/${id}`);

    console.log("Get station by ID response:", response.data);

    if (response.data && response.data._id) {
      return response.data;
    }

    throw new Error("Station not found");
  } catch (error) {
    handleError(error);
    throw error;
  }
};

/**
 * POST /api/stations
 * Create a new station with optional file upload
 *
 * Backend expects FormData with fields:
 * - name: string (required)
 * - address: string (required)
 * - lat: number (required)
 * - lng: number (required)
 * - note: string (optional)
 * - coverFile: File (optional - multipart/form-data)
 *
 * Note: code is auto-generated by backend (ST01, ST02, etc.)
 */
export const createStation = async (
  stationData: FormData
): Promise<Station> => {
  try {
    console.log("üì§ API: Creating station...");

    // Debug: Log FormData contents
    console.log("üì¶ FormData entries:");
    for (const [key, value] of stationData.entries()) {
      if (value instanceof File) {
        console.log(`  ${key}:`, {
          name: value.name,
          type: value.type,
          size: value.size,
        });
      } else {
        console.log(`  ${key}:`, value);
      }
    }

    // ‚úÖ DO NOT set Content-Type header - browser sets it automatically with boundary
    const response = await api.post<Station>("/stations", stationData);

    console.log("‚úÖ API: Create station response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå API: Error creating station:", error);
    handleError(error);
    throw error;
  }
};

/**
 * PUT /api/stations/:id
 * Update an existing station
 *
 * Backend expects FormData with fields:
 * - name: string (required)
 * - code: string (optional)
 * - address: string (required)
 * - lat: number (required)
 * - lng: number (required)
 * - note: string (optional)
 * - isActive: boolean/string (required)
 * - imgStation: string (optional - "" or "null" to remove image, Media._id to set existing)
 * - coverFile: File (optional - new file upload)
 *
 * Backend parses isActive: "true", "1", "yes" ‚Üí true; "false", "0", "no" ‚Üí false
 */
export const updateStation = async (
  id: string,
  stationData: FormData
): Promise<Station> => {
  try {
    console.log("üì§ Updating station:", id);

    // Debug: Log FormData contents
    console.log("üì¶ FormData entries:");
    for (const [key, value] of stationData.entries()) {
      if (value instanceof File) {
        console.log(`  ${key}:`, {
          name: value.name,
          type: value.type,
          size: value.size,
        });
      } else {
        console.log(`  ${key}:`, value);
      }
    }

    // ‚úÖ Don't set Content-Type for FormData
    const response = await api.put<Station>(`/stations/${id}`, stationData);

    console.log("‚úÖ Update station response:", response.data);

    if (response.data && response.data._id) {
      return response.data;
    }

    throw new Error("Failed to update station");
  } catch (error) {
    handleError(error);
    throw error;
  }
};

/**
 * DELETE /api/stations/:id
 * Delete a station
 *
 * If station has vehicles, transferToStationId is required to transfer them
 * before deletion
 *
 * @param id - Station ID to delete
 * @param transferToStationId - Optional: ID of station to transfer vehicles to
 * @param reason - Optional: Reason for deletion
 */
export const deleteStation = async (
  id: string,
  transferToStationId?: string,
  reason?: string
): Promise<DeleteStationResponse> => {
  try {
    const payload: any = {};
    if (transferToStationId) payload.transferToStationId = transferToStationId;
    if (reason) payload.reason = reason;

    const response = await api.delete(`/stations/${id}`, {
      data: payload,
    });

    console.log("Delete station response:", response.data);

    // Backend returns { success: true, ...result }
    if (response.data) {
      return response.data as DeleteStationResponse;
    }

    return { success: true };
  } catch (error) {
    handleError(error);
    throw error;
  }
};

// ============================================
// ‚úÖ HELPER FUNCTIONS
// ============================================

/**
 * Get only active stations
 */
export const getActiveStations = async (): Promise<Station[]> => {
  try {
    const allStations = await getAllStations();
    return allStations.filter((station) => station.isActive === true);
  } catch (error) {
    handleError(error);
    throw error;
  }
};

/**
 * Search stations by name, code, or address
 */
export const searchStations = async (
  searchTerm: string
): Promise<Station[]> => {
  try {
    const allStations = await getAllStations();
    const lowerSearchTerm = searchTerm.toLowerCase();

    return allStations.filter(
      (station) =>
        station.name.toLowerCase().includes(lowerSearchTerm) ||
        station.location.address.toLowerCase().includes(lowerSearchTerm) ||
        station.code?.toLowerCase().includes(lowerSearchTerm)
    );
  } catch (error) {
    handleError(error);
    throw error;
  }
};

/**
 * Get station by unique code
 */
export const getStationByCode = async (
  code: string
): Promise<Station | null> => {
  try {
    const allStations = await getAllStations();
    return allStations.find((station) => station.code === code) || null;
  } catch (error) {
    handleError(error);
    throw error;
  }
};

// ============================================
// ‚úÖ FORMDATA BUILDERS
// ============================================

/**
 * Helper: Build FormData for CREATE operation
 *
 * @param data - Station data
 * @param coverFile - Optional cover file for upload
 * @returns FormData ready for API submission
 */
export function buildCreateStationFormData(
  data: {
    name: string;
    code?: string; // Optional - if not provided, backend auto-generates
    address: string;
    lat: number;
    lng: number;
    note?: string;
  },
  coverFile?: File
): FormData {
  const formData = new FormData();

  formData.append("name", data.name.trim());

  // ‚úÖ Only append code if provided and not empty (backend auto-generates if omitted)
  if (data.code && data.code.trim()) {
    formData.append("code", data.code.trim());
  }

  formData.append("address", data.address.trim());
  formData.append("lat", data.lat.toString());
  formData.append("lng", data.lng.toString());

  if (data.note && data.note.trim()) {
    formData.append("note", data.note.trim());
  }

  if (coverFile) {
    formData.append("coverFile", coverFile);
    console.log("‚úÖ coverFile added to FormData:", coverFile.name);
  }

  return formData;
}

/**
 * Helper: Build FormData for UPDATE operation
 *
 * @param data - Station data to update
 * @param coverFile - Optional new cover file
 * @param removeImage - Set to true to remove existing image
 * @returns FormData ready for API submission
 */
export const buildUpdateStationFormData = (
  data: {
    name: string;
    code?: string;
    address: string;
    lat: number;
    lng: number;
    note?: string;
    isActive: boolean;
  },
  coverFile?: File,
  removeImage?: boolean
): FormData => {
  const formData = new FormData();

  // ‚úÖ Backend expects flat fields
  formData.append("name", data.name.trim());

  if (data.code && data.code.trim()) {
    formData.append("code", data.code.trim());
  }

  formData.append("address", data.address.trim());
  formData.append("lat", data.lat.toString());
  formData.append("lng", data.lng.toString());

  if (data.note && data.note.trim()) {
    formData.append("note", data.note.trim());
  }

  // ‚úÖ isActive as string (backend parses it)
  formData.append("isActive", data.isActive ? "true" : "false");

  // ‚úÖ Handle image removal (send "" or "null")
  if (removeImage) {
    formData.append("imgStation", "");
    console.log("üóëÔ∏è Marked image for removal");
  }

  // ‚úÖ Add new cover file if provided
  if (coverFile) {
    formData.append("coverFile", coverFile);
    console.log("‚úÖ coverFile added to FormData:", coverFile.name);
  }

  return formData;
};
